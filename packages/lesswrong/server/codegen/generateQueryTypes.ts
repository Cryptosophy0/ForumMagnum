import { allQueries } from '../../lib/queries';
import { generatedFileHeader } from './typeGenerationUtils';
import { getFragmentFieldType } from './generateFragmentTypes';
import gql from 'graphql-tag';

const queryFileHeader = generatedFileHeader+`//
// Contains Typescript signatures for queries, generated by
// server/codegen/generateQueryTypes.ts.
//
`

export function generateQueryTypes(): string {
  const sb: string[] = [];
  const queryNames = Object.keys(allQueries);
  
  for (const queryName of queryNames) {
    const queryGraphql = allQueries[queryName];
    sb.push(generateQueryTypeDefinition(queryName, queryGraphql));
  }
  
  sb.push("interface QueryResultTypes {\n");
  for (const queryName of queryNames) {
    sb.push(`  ${queryName}: Query${queryName}Result\n`);
  }
  sb.push("}\n\n");
  
  sb.push(`type QueryName = ${queryNames.map(n=>JSON.stringify(n)).join("|")}\n`);
  
  return queryFileHeader + sb.join('');
}

const extractQueryName = (queryText: string): QueryName => {
  const match = queryText.match(/query ([_a-zA-Z][_a-zA-Z0-9]+)/)
  if (!match) throw new Error("Could not extract query name");
  return match[1] as QueryName;
}

function generateQueryTypeDefinition(queryName: string, queryGraphql: string): string {
  const sb: Array<string> = [];
  const interfaceName = `Query${queryName}Result`;
  const parsedQuery = gql(queryGraphql);
  
  if (extractQueryName(queryGraphql) !== queryName) {
    throw new Error(`Mismatched graphql query names: expected ${queryName}, found ${extractQueryName(queryGraphql)}.`);
  }
  
  sb.push(`interface ${interfaceName} {\n`);
  
  for (let graphqlDefinition of parsedQuery?.definitions) {
    if (graphqlDefinition.kind === 'OperationDefinition') {
      for (let selection of graphqlDefinition?.selectionSet?.selections) {
        switch(selection.kind) {
          case "Field":
            const selectionType = "any"; //TODO
            sb.push(`  readonly ${selection.name.value}: ${selectionType},\n`);
            break;
          case "FragmentSpread":
            break; //TODO
          default:
            throw new Error("Unrecognized GraphQL selection kind: "+selection.kind);
        }
      }
    }
  }
  
  sb.push(`}\n\n\n`);
  return sb.join('');
}
