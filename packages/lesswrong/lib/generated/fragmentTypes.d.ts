//
// GENERATED FILE
// Do not edit this file directly. Instead, start a server and run "npm run generate",
// which will cause this file to be regenerated. This file should nevertheless be
// checked in to version control.
//
// Contains Typescript signatures for fragments, generated by
// server/codegen/generateFragmentTypes.ts.
//
interface UsersDefaultFragment { // fragment on Users
  readonly _id: string | null,
  readonly username: string | null,
  readonly createdAt: Date | null,
  readonly isAdmin: boolean | null,
  readonly services: any /*{"definitions":[{"blackbox":true}]}*/ | null,
  readonly displayName: string | null,
  readonly email: string | null,
  readonly slug: string | null,
  readonly groups: Array<string | null> | null,
}

interface VotesDefaultFragment { // fragment on Votes
  readonly documentId: string,
  readonly collectionName: string,
  readonly userId: string,
  readonly authorId: string,
  readonly voteType: string,
  readonly power: number | null,
  readonly afPower: number | null,
  readonly cancelled: boolean,
  readonly isUnvote: boolean,
  readonly votedAt: Date | null,
}

interface PostsMinimumInfo { // fragment on Posts
  readonly _id: string | null,
  readonly slug: string | null,
  readonly title: string,
  readonly draft: boolean | null,
  readonly hideCommentKarma: boolean | null,
  readonly af: boolean | null,
}

interface PostsBase extends PostsMinimumInfo { // fragment on Posts
  readonly url: string | null,
  readonly postedAt: Date | null,
  readonly createdAt: Date | null,
  readonly modifiedAt: Date | null,
  readonly sticky: boolean | null,
  readonly metaSticky: boolean | null,
  readonly status: number | null,
  readonly frontpageDate: Date | null,
  readonly meta: boolean | null,
  readonly draft: boolean | null,
  readonly deletedDraft: boolean | null,
  readonly viewCount: number | null,
  readonly clickCount: number | null,
  readonly commentCount: number | null,
  readonly voteCount: number | null,
  readonly baseScore: number | null,
  readonly unlisted: boolean | null,
  readonly score: number | null,
  readonly feedId: string | null,
  readonly feedLink: string | null,
  readonly lastVisitedAt: Date | null,
  readonly isRead: boolean | null,
  readonly lastCommentedAt: Date | null,
  readonly lastCommentPromotedAt: Date | null,
  readonly canonicalCollectionSlug: string | null,
  readonly curatedDate: Date | null,
  readonly commentsLocked: boolean | null,
  readonly question: boolean | null,
  readonly hiddenRelatedQuestion: boolean | null,
  readonly originalPostRelationSourceId: string | null,
  readonly userId: string | null,
  readonly groupId: string | null,
  readonly location: string | null,
  readonly googleLocation: any /*{"definitions":[{"blackbox":true}]}*/ | null,
  readonly mongoLocation: any /*{"definitions":[{"blackbox":true}]}*/ | null,
  readonly startTime: Date | null,
  readonly endTime: Date | null,
  readonly localStartTime: Date | null,
  readonly localEndTime: Date | null,
  readonly facebookLink: string | null,
  readonly website: string | null,
  readonly contactInfo: string | null,
  readonly isEvent: boolean | null,
  readonly types: Array<string | null> | null,
  readonly reviewedByUserId: string | null,
  readonly suggestForCuratedUserIds: Array<string | null> | null,
  readonly suggestForCuratedUsernames: string | null,
  readonly reviewForCuratedUserId: string | null,
  readonly authorIsUnreviewed: boolean | null,
  readonly afDate: Date | null,
  readonly suggestForAlignmentUserIds: Array<string | null> | null,
  readonly reviewForAlignmentUserId: string | null,
  readonly afBaseScore: number | null,
  readonly afCommentCount: number | null,
  readonly afLastCommentedAt: Date | null,
  readonly afSticky: boolean | null,
  readonly isFuture: boolean | null,
  readonly hideAuthor: boolean | null,
  readonly moderationStyle: string | null,
  readonly hideCommentKarma: boolean | null,
  readonly submitToFrontpage: boolean | null,
  readonly shortform: boolean | null,
  readonly canonicalSource: string | null,
  readonly shareWithUsers: Array<string | null> | null,
  readonly nominationCount2018: number | null,
  readonly reviewCount2018: number | null,
  readonly group: PostsBase_group | null,
  readonly bestAnswer: CommentsList | null,
}

interface PostsBase_group { // fragment on Localgroups
  readonly _id: string | null,
  readonly name: string,
}

interface PostsAuthors { // fragment on Posts
  readonly user: PostsAuthors_user | null,
  readonly coauthors: Array<UsersMinimumInfo> | null,
}

interface PostsAuthors_user extends UsersMinimumInfo { // fragment on Users
  readonly moderationStyle: string | null,
  readonly bannedUserIds: Array<string | null> | null,
  readonly moderatorAssistance: boolean | null,
}

interface PostsList extends PostsBase, PostsAuthors { // fragment on Posts
  readonly contents: PostsList_contents | null,
  readonly moderationGuidelines: RevisionDisplay | null,
  readonly customHighlight: PostsList_customHighlight | null,
  readonly tags: Array<TagPreviewFragment> | null,
}

interface PostsList_contents { // fragment on Revisions
  readonly htmlHighlight: string | null,
  readonly wordCount: number,
  readonly version: string | null,
}

interface PostsList_customHighlight { // fragment on Revisions
  readonly version: string | null,
  readonly html: string | null,
}

interface PostsListTag extends PostsList { // fragment on Posts
  readonly tagRel: WithVoteTagRel | null,
}

interface PostsDetails extends PostsBase, PostsAuthors { // fragment on Posts
  readonly commentSortOrder: string | null,
  readonly collectionTitle: string | null,
  readonly canonicalPrevPostSlug: string | null,
  readonly canonicalNextPostSlug: string | null,
  readonly canonicalCollectionSlug: string | null,
  readonly canonicalSequenceId: string | null,
  readonly canonicalBookId: string | null,
  readonly canonicalSequence: PostsDetails_canonicalSequence | null,
  readonly canonicalBook: PostsDetails_canonicalBook | null,
  readonly canonicalCollection: PostsDetails_canonicalCollection | null,
  readonly showModerationGuidelines: boolean | null,
  readonly moderationGuidelines: RevisionDisplay | null,
  readonly customHighlight: PostsDetails_customHighlight | null,
  readonly bannedUserIds: Array<string | null> | null,
  readonly hideAuthor: boolean | null,
  readonly moderationStyle: string | null,
  readonly voteCount: number | null,
  readonly currentUserVotes: Array<VoteFragment> | null,
  readonly feed: RSSFeedMinimumInfo | null,
  readonly sourcePostRelations: Array<PostsDetails_sourcePostRelations> | null,
  readonly targetPostRelations: Array<PostsDetails_targetPostRelations> | null,
}

interface PostsDetails_canonicalSequence { // fragment on Sequences
  readonly title: string,
}

interface PostsDetails_canonicalBook { // fragment on Books
  readonly title: string | null,
}

interface PostsDetails_canonicalCollection { // fragment on Collections
  readonly title: string,
}

interface PostsDetails_customHighlight { // fragment on Revisions
  readonly version: string | null,
  readonly html: string | null,
}

interface PostsDetails_sourcePostRelations { // fragment on PostRelations
  readonly _id: string | null,
  readonly sourcePostId: string,
  readonly sourcePost: PostsDetails_sourcePostRelations_sourcePost | null,
  readonly order: number | null,
}

interface PostsDetails_sourcePostRelations_sourcePost extends PostsBase, PostsAuthors { // fragment on Posts
}

interface PostsDetails_targetPostRelations { // fragment on PostRelations
  readonly _id: string | null,
  readonly sourcePostId: string,
  readonly targetPostId: string,
  readonly targetPost: PostsDetails_targetPostRelations_targetPost | null,
  readonly order: number | null,
}

interface PostsDetails_targetPostRelations_targetPost extends PostsBase, PostsAuthors { // fragment on Posts
}

interface PostsRevision extends PostsDetails { // fragment on Posts
  readonly version: string | null,
  readonly contents: RevisionDisplay | null,
  readonly revisions: Array<PostsRevision_revisions> | null,
}

interface PostsRevision_revisions { // fragment on Revisions
  readonly version: string | null,
  readonly editedAt: Date | null,
}

interface PostsRevisionEdit extends PostsDetails { // fragment on Posts
  readonly version: string | null,
  readonly contents: RevisionEdit | null,
  readonly revisions: Array<PostsRevisionEdit_revisions> | null,
}

interface PostsRevisionEdit_revisions { // fragment on Revisions
  readonly version: string | null,
  readonly editedAt: Date | null,
}

interface PostsWithNavigationAndRevision extends PostsRevision, PostSequenceNavigation { // fragment on Posts
  readonly tags: Array<TagPreviewFragment> | null,
  readonly tableOfContentsRevision: any,
}

interface PostsWithNavigation extends PostsPage, PostSequenceNavigation { // fragment on Posts
  readonly tableOfContents: any,
}

interface PostSequenceNavigation { // fragment on Posts
  readonly sequence: PostSequenceNavigation_sequence | null,
  readonly prevPost: PostSequenceNavigation_prevPost | null,
  readonly nextPost: PostSequenceNavigation_nextPost | null,
}

interface PostSequenceNavigation_sequence { // fragment on Sequences
  readonly _id: string | null,
  readonly title: string,
}

interface PostSequenceNavigation_prevPost { // fragment on Posts
  readonly _id: string | null,
  readonly title: string,
  readonly slug: string | null,
  readonly commentCount: number | null,
  readonly baseScore: number | null,
  readonly sequence: PostSequenceNavigation_prevPost_sequence | null,
}

interface PostSequenceNavigation_prevPost_sequence { // fragment on Sequences
  readonly _id: string | null,
}

interface PostSequenceNavigation_nextPost { // fragment on Posts
  readonly _id: string | null,
  readonly title: string,
  readonly slug: string | null,
  readonly commentCount: number | null,
  readonly baseScore: number | null,
  readonly sequence: PostSequenceNavigation_nextPost_sequence | null,
}

interface PostSequenceNavigation_nextPost_sequence { // fragment on Sequences
  readonly _id: string | null,
}

interface PostsPage extends PostsDetails { // fragment on Posts
  readonly version: string | null,
  readonly contents: RevisionDisplay | null,
  readonly tags: Array<TagPreviewFragment> | null,
}

interface PostsEdit extends PostsPage { // fragment on Posts
  readonly coauthorUserIds: Array<string | null> | null,
  readonly moderationGuidelines: RevisionEdit | null,
  readonly contents: RevisionEdit | null,
  readonly customHighlight: RevisionEdit | null,
  readonly tableOfContents: any,
}

interface EditModerationGuidelines { // fragment on Posts
  readonly moderationGuidelines: RevisionEdit | null,
  readonly moderationStyle: string | null,
}

interface PostsRevisionsList { // fragment on Posts
  readonly _id: string | null,
  readonly revisions: Array<PostsRevisionsList_revisions> | null,
}

interface PostsRevisionsList_revisions { // fragment on Revisions
  readonly version: string | null,
  readonly editedAt: Date | null,
}

interface PostsRecentDiscussion extends PostsList { // fragment on Posts
  readonly recentComments: Array<CommentsList> | null,
}

interface UsersBannedFromPostsModerationLog { // fragment on Posts
  readonly user: UsersMinimumInfo | null,
  readonly title: string,
  readonly slug: string | null,
  readonly _id: string | null,
  readonly bannedUserIds: Array<string | null> | null,
}

interface SunshinePostsList extends PostsList { // fragment on Posts
  readonly user: SunshinePostsList_user | null,
}

interface SunshinePostsList_user extends UsersMinimumInfo { // fragment on Users
  readonly moderationStyle: string | null,
  readonly bannedUserIds: Array<string | null> | null,
  readonly moderatorAssistance: boolean | null,
  readonly moderationGuidelines: SunshinePostsList_user_moderationGuidelines | null,
}

interface SunshinePostsList_user_moderationGuidelines { // fragment on Revisions
  readonly html: string | null,
}

interface CommentsList { // fragment on Comments
  readonly _id: string | null,
  readonly postId: string | null,
  readonly parentCommentId: string | null,
  readonly topLevelCommentId: string | null,
  readonly contents: CommentsList_contents | null,
  readonly postedAt: Date | null,
  readonly repliesBlockedUntil: Date | null,
  readonly userId: string | null,
  readonly deleted: boolean | null,
  readonly deletedPublic: boolean | null,
  readonly deletedReason: string | null,
  readonly hideAuthor: boolean | null,
  readonly user: UsersMinimumInfo | null,
  readonly currentUserVotes: Array<VoteFragment> | null,
  readonly baseScore: number | null,
  readonly score: number | null,
  readonly voteCount: number | null,
  readonly af: boolean | null,
  readonly afDate: Date | null,
  readonly moveToAlignmentUserId: string | null,
  readonly afBaseScore: number | null,
  readonly suggestForAlignmentUserIds: Array<string | null> | null,
  readonly needsReview: boolean | null,
  readonly answer: boolean | null,
  readonly parentAnswerId: string | null,
  readonly retracted: boolean | null,
  readonly postVersion: string | null,
  readonly reviewedByUserId: string | null,
  readonly shortform: boolean | null,
  readonly lastSubthreadActivity: Date | null,
  readonly moderatorHat: boolean | null,
  readonly nominatedForReview: string | null,
  readonly reviewingForReview: string | null,
  readonly promoted: boolean | null,
  readonly promotedByUserId: string | null,
  readonly promotedByUser: UsersMinimumInfo | null,
}

interface CommentsList_contents extends RevisionDisplay { // fragment on Revisions
  readonly plaintextMainText: string | null,
}

interface CommentPermalink extends CommentsList { // fragment on Comments
  readonly parentComment: CommentsList | null,
}

interface ShortformComments extends CommentsList { // fragment on Comments
  readonly post: PostsMinimumInfo | null,
}

interface CommentWithRepliesFragment extends CommentsList { // fragment on Comments
  readonly lastSubthreadActivity: Date | null,
  readonly latestChildren: Array<CommentsList> | null,
  readonly post: PostsBase | null,
}

interface CommentEdit extends CommentsList { // fragment on Comments
  readonly contents: RevisionEdit | null,
}

interface NotificationsDefaultFragment { // fragment on Notifications
  readonly userId: string | null,
  readonly createdAt: Date | null,
  readonly documentId: string | null,
  readonly documentType: string | null,
  readonly link: string | null,
  readonly title: string | null,
  readonly message: string | null,
  readonly type: string | null,
  readonly viewed: boolean | null,
  readonly emailed: boolean,
  readonly waitingForBatch: boolean,
}

interface ConversationsDefaultFragment { // fragment on Conversations
  readonly createdAt: Date | null,
  readonly title: string | null,
  readonly participantIds: Array<string | null> | null,
  readonly latestActivity: Date | null,
  readonly af: boolean | null,
  readonly messageCount: number | null,
  readonly archivedByIds: Array<string | null> | null,
}

interface MessagesDefaultFragment { // fragment on Messages
  readonly userId: string | null,
  readonly createdAt: Date | null,
  readonly conversationId: string,
}

interface RSSFeedsDefaultFragment { // fragment on RSSFeeds
  readonly userId: string | null,
  readonly createdAt: Date | null,
  readonly ownedByUser: boolean | null,
  readonly displayFullContent: boolean | null,
  readonly nickname: string | null,
  readonly url: string | null,
  readonly status: string | null,
  readonly rawFeed: any /*{"definitions":[{}]}*/ | null,
  readonly setCanonicalUrl: boolean | null,
}

interface ReportsDefaultFragment { // fragment on Reports
  readonly userId: string | null,
  readonly commentId: string | null,
  readonly postId: string,
  readonly link: string,
  readonly claimedUserId: string | null,
  readonly description: string | null,
  readonly createdAt: Date | null,
  readonly closedAt: Date | null,
  readonly markedAsSpam: boolean | null,
  readonly reportedAsSpam: boolean | null,
}

interface LWEventsDefaultFragment { // fragment on LWEvents
  readonly createdAt: Date | null,
  readonly userId: string | null,
  readonly name: string,
  readonly documentId: string | null,
  readonly important: boolean | null,
  readonly properties: any /*{"definitions":[{"blackbox":true}]}*/ | null,
  readonly intercom: boolean | null,
}

interface lwEventsAdminPageFragment { // fragment on LWEvents
  readonly _id: string | null,
  readonly createdAt: Date | null,
  readonly userId: string | null,
  readonly user: UsersMinimumInfo | null,
  readonly name: string,
  readonly documentId: string | null,
  readonly important: boolean | null,
  readonly properties: any /*{"definitions":[{"blackbox":true}]}*/ | null,
  readonly intercom: boolean | null,
}

interface emailHistoryFragment { // fragment on LWEvents
  readonly _id: string | null,
  readonly userId: string | null,
  readonly name: string,
  readonly properties: any /*{"definitions":[{"blackbox":true}]}*/ | null,
}

interface BansDefaultFragment { // fragment on Bans
  readonly createdAt: Date | null,
  readonly expirationDate: Date | null,
  readonly userId: string | null,
  readonly ip: string | null,
  readonly reason: string | null,
  readonly comment: string | null,
  readonly properties: any /*{"definitions":[{"blackbox":true}]}*/ | null,
}

interface BansAdminPageFragment { // fragment on Bans
  readonly _id: string | null,
  readonly createdAt: Date | null,
  readonly expirationDate: Date | null,
  readonly userId: string | null,
  readonly user: UsersMinimumInfo | null,
  readonly reason: string | null,
  readonly comment: string | null,
  readonly ip: string | null,
  readonly properties: any /*{"definitions":[{"blackbox":true}]}*/ | null,
}

interface SequencesDefaultFragment { // fragment on Sequences
  readonly createdAt: Date | null,
  readonly userId: string | null,
  readonly title: string,
  readonly baseScore: number | null,
  readonly score: number | null,
  readonly color: string | null,
  readonly gridImageId: string | null,
  readonly bannerImageId: string | null,
  readonly curatedOrder: number | null,
  readonly userProfileOrder: number | null,
  readonly draft: boolean | null,
  readonly isDeleted: boolean | null,
  readonly canonicalCollectionSlug: string | null,
  readonly hidden: boolean | null,
}

interface PostRelationsDefaultFragment { // fragment on PostRelations
  readonly createdAt: Date | null,
  readonly type: string | null,
  readonly sourcePostId: string,
  readonly targetPostId: string,
  readonly order: number | null,
}

interface TagRelsDefaultFragment { // fragment on TagRels
  readonly createdAt: Date | null,
  readonly tagId: string,
  readonly postId: string,
  readonly deleted: boolean | null,
  readonly userId: string,
  readonly afBaseScore: number | null,
}

interface CommentsDefaultFragment { // fragment on Comments
  readonly parentCommentId: string | null,
  readonly topLevelCommentId: string | null,
  readonly createdAt: Date | null,
  readonly postedAt: Date | null,
  readonly author: string | null,
  readonly postId: string | null,
  readonly userId: string | null,
  readonly isDeleted: boolean | null,
  readonly userIP: string | null,
  readonly userAgent: string | null,
  readonly referrer: string | null,
  readonly authorIsUnreviewed: boolean | null,
  readonly answer: boolean | null,
  readonly parentAnswerId: string | null,
  readonly shortform: boolean | null,
  readonly nominatedForReview: string | null,
  readonly reviewingForReview: string | null,
  readonly lastSubthreadActivity: Date | null,
  readonly postVersion: string | null,
  readonly promoted: boolean | null,
  readonly promotedByUserId: string | null,
  readonly promotedAt: Date | null,
  readonly hideKarma: boolean | null,
}

interface TagsDefaultFragment { // fragment on Tags
  readonly createdAt: Date | null,
  readonly name: string,
  readonly slug: string | null,
  readonly core: boolean,
  readonly suggestedAsFilter: boolean,
  readonly defaultOrder: number,
  readonly postCount: number | null,
  readonly adminOnly: boolean,
  readonly deleted: boolean | null,
}

interface PostsDefaultFragment { // fragment on Posts
  readonly createdAt: Date | null,
  readonly postedAt: Date | null,
  readonly modifiedAt: Date | null,
  readonly url: string | null,
  readonly title: string,
  readonly slug: string | null,
  readonly excerpt: string | null,
  readonly viewCount: number | null,
  readonly lastCommentedAt: Date | null,
  readonly clickCount: number | null,
  readonly deletedDraft: boolean | null,
  readonly status: number | null,
  readonly isFuture: boolean | null,
  readonly sticky: boolean | null,
  readonly userIP: string | null,
  readonly userAgent: string | null,
  readonly referrer: string | null,
  readonly author: string | null,
  readonly userId: string | null,
  readonly scheduledAt: Date | null,
  readonly question: boolean | null,
  readonly authorIsUnreviewed: boolean | null,
  readonly submitToFrontpage: boolean | null,
  readonly hiddenRelatedQuestion: boolean | null,
  readonly originalPostRelationSourceId: string | null,
  readonly shortform: boolean | null,
  readonly canonicalSource: string | null,
  readonly nominationCount2018: number | null,
  readonly reviewCount2018: number | null,
  readonly lastCommentPromotedAt: Date | null,
  readonly tagRelevance: any /*{"definitions":[{}]}*/ | null,
}

interface ChaptersDefaultFragment { // fragment on Chapters
  readonly createdAt: Date | null,
  readonly title: string | null,
  readonly subtitle: string | null,
  readonly number: number | null,
  readonly sequenceId: string | null,
  readonly postIds: Array<string | null>,
}

interface BooksDefaultFragment { // fragment on Books
  readonly createdAt: Date | null,
  readonly postedAt: Date | null,
  readonly title: string | null,
  readonly subtitle: string | null,
  readonly collectionId: string,
  readonly number: number | null,
  readonly postIds: Array<string | null> | null,
  readonly sequenceIds: Array<string | null> | null,
}

interface CollectionsDefaultFragment { // fragment on Collections
  readonly createdAt: Date | null,
  readonly userId: string | null,
  readonly title: string,
  readonly slug: string,
  readonly gridImageId: string | null,
  readonly firstPageLink: string | null,
}

interface ReviewVotesDefaultFragment { // fragment on ReviewVotes
  readonly createdAt: Date | null,
  readonly userId: string | null,
  readonly postId: string,
  readonly qualitativeScore: number | null,
  readonly quadraticScore: number | null,
  readonly comment: string | null,
}

interface reviewVoteFragment { // fragment on ReviewVotes
  readonly _id: string | null,
  readonly createdAt: Date | null,
  readonly userId: string | null,
  readonly postId: string,
  readonly qualitativeScore: number | null,
  readonly quadraticScore: number | null,
  readonly comment: string | null,
}

interface LocalgroupsDefaultFragment { // fragment on Localgroups
  readonly createdAt: Date | null,
  readonly name: string,
  readonly organizerIds: Array<string | null>,
  readonly lastActivity: Date | null,
  readonly types: Array<string | null>,
  readonly mongoLocation: any /*{"definitions":[{"blackbox":true}]}*/ | null,
  readonly googleLocation: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly location: string,
  readonly contactInfo: string | null,
  readonly facebookLink: string | null,
  readonly website: string | null,
  readonly inactive: boolean | null,
}

interface localGroupsBase { // fragment on Localgroups
  readonly _id: string | null,
  readonly createdAt: Date | null,
  readonly organizerIds: Array<string | null>,
  readonly organizers: Array<UsersMinimumInfo> | null,
  readonly lastActivity: Date | null,
  readonly name: string,
  readonly location: string,
  readonly googleLocation: any /*{"definitions":[{"blackbox":true}]}*/,
  readonly mongoLocation: any /*{"definitions":[{"blackbox":true}]}*/ | null,
  readonly types: Array<string | null>,
  readonly contactInfo: string | null,
  readonly facebookLink: string | null,
  readonly website: string | null,
  readonly inactive: boolean | null,
}

interface localGroupsHomeFragment extends localGroupsBase { // fragment on Localgroups
  readonly contents: RevisionDisplay | null,
}

interface localGroupsEdit extends localGroupsBase { // fragment on Localgroups
  readonly contents: RevisionEdit | null,
}

interface UsersAdmin { // fragment on Users
  readonly _id: string | null,
  readonly username: string | null,
  readonly createdAt: Date | null,
  readonly isAdmin: boolean | null,
  readonly displayName: string | null,
  readonly email: string | null,
  readonly slug: string | null,
  readonly groups: Array<string | null> | null,
  readonly services: any /*{"definitions":[{"blackbox":true}]}*/ | null,
  readonly karma: number | null,
}

interface conversationsListFragment { // fragment on Conversations
  readonly _id: string | null,
  readonly title: string | null,
  readonly createdAt: Date | null,
  readonly latestActivity: Date | null,
  readonly participantIds: Array<string | null> | null,
  readonly participants: Array<UsersMinimumInfo> | null,
  readonly archivedByIds: Array<string | null> | null,
  readonly messageCount: number | null,
}

interface newConversationFragment { // fragment on Conversations
  readonly _id: string | null,
  readonly title: string | null,
  readonly participantIds: Array<string | null> | null,
}

interface messageListFragment { // fragment on Messages
  readonly _id: string | null,
  readonly user: UsersMinimumInfo | null,
  readonly contents: messageListFragment_contents | null,
  readonly createdAt: Date | null,
  readonly conversationId: string,
}

interface messageListFragment_contents { // fragment on Revisions
  readonly html: string | null,
}

interface editTitle { // fragment on Conversations
  readonly _id: string | null,
  readonly title: string | null,
}

interface NotificationsList { // fragment on Notifications
  readonly _id: string | null,
  readonly documentId: string | null,
  readonly documentType: string | null,
  readonly userId: string | null,
  readonly createdAt: Date | null,
  readonly link: string | null,
  readonly message: string | null,
  readonly type: string | null,
  readonly viewed: boolean | null,
}

interface UsersCurrent extends UsersMinimumInfo { // fragment on Users
  readonly _id: string | null,
  readonly username: string | null,
  readonly createdAt: Date | null,
  readonly isAdmin: boolean | null,
  readonly displayName: string | null,
  readonly email: string | null,
  readonly slug: string | null,
  readonly groups: Array<string | null> | null,
  readonly services: any /*{"definitions":[{"blackbox":true}]}*/ | null,
  readonly pageUrl: string | null,
  readonly voteBanned: boolean | null,
  readonly banned: Date | null,
  readonly isReviewed: boolean | null,
  readonly nullifyVotes: boolean | null,
  readonly hideIntercom: boolean | null,
  readonly hideNavigationSidebar: boolean | null,
  readonly currentFrontpageFilter: string | null,
  readonly frontpageFilterSettings: any /*{"definitions":[{"blackbox":true}]}*/ | null,
  readonly allPostsTimeframe: string | null,
  readonly allPostsSorting: string | null,
  readonly allPostsFilter: string | null,
  readonly allPostsShowLowKarma: boolean | null,
  readonly allPostsOpenSettings: boolean | null,
  readonly lastNotificationsCheck: Date | null,
  readonly bannedUserIds: Array<string | null> | null,
  readonly bannedPersonalUserIds: Array<string | null> | null,
  readonly moderationStyle: string | null,
  readonly moderationGuidelines: RevisionEdit | null,
  readonly showHideKarmaOption: boolean | null,
  readonly markDownPostEditor: boolean | null,
  readonly commentSorting: string | null,
  readonly location: string | null,
  readonly googleLocation: any /*{"definitions":[{"blackbox":true}]}*/ | null,
  readonly mongoLocation: any /*{"definitions":[{"blackbox":true}]}*/ | null,
  readonly mapLocation: any /*{"definitions":[{"blackbox":true}]}*/ | null,
  readonly mapLocationSet: boolean | null,
  readonly mapMarkerText: string | null,
  readonly htmlMapMarkerText: string | null,
  readonly nearbyEventsNotifications: boolean | null,
  readonly nearbyEventsNotificationsLocation: any /*{"definitions":[{"blackbox":true}]}*/ | null,
  readonly nearbyEventsNotificationsRadius: number | null,
  readonly nearbyPeopleNotificationThreshold: number | null,
  readonly hideFrontpageMap: boolean | null,
  readonly emailSubscribedToCurated: boolean | null,
  readonly unsubscribeFromAll: boolean | null,
  readonly emails: Array<any /*{"definitions":[{}]}*/ | null> | null,
  readonly whenConfirmationEmailSent: Date | null,
  readonly noCollapseCommentsFrontpage: boolean | null,
  readonly noCollapseCommentsPosts: boolean | null,
  readonly noSingleLineComments: boolean | null,
  readonly karmaChangeNotifierSettings: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_cleanOptions":{"filter":true,"autoConvert":true,"removeEmptyStrings":true,"trimStrings":true,"getAutoValues":true,"removeNullsFromArrays":false,"extendAutoValueContext":{}},"_schema":{"updateFrequency":{"optional":true,"type":{"definitions":[{"allowedValues":["disabled","daily","weekly","realtime"]}]},"label":"Update frequency"},"timeOfDayGMT":{"optional":true,"type":{"definitions":[{"type":"SimpleSchema.Integer","min":0,"max":23}]},"label":"Time of day gmt"},"dayOfWeekGMT":{"optional":true,"type":{"definitions":[{"allowedValues":["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"]}]},"label":"Day of week gmt"},"showNegativeKarma":{"optional":true,"type":{"definitions":[{}]},"label":"Show negative karma"}},"_depsLabels":{},"_schemaKeys":["updateFrequency","timeOfDayGMT","dayOfWeekGMT","showNegativeKarma"],"_autoValues":[],"_blackboxKeys":[],"_firstLevelSchemaKeys":["updateFrequency","timeOfDayGMT","dayOfWeekGMT","showNegativeKarma"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/ | null,
  readonly karmaChangeLastOpened: Date | null,
  readonly shortformFeedId: string | null,
  readonly viewUnreviewedComments: boolean | null,
  readonly sunshineShowNewUserContent: boolean | null,
  readonly recommendationSettings: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_cleanOptions":{"filter":true,"autoConvert":true,"removeEmptyStrings":true,"trimStrings":true,"getAutoValues":true,"removeNullsFromArrays":false,"extendAutoValueContext":{}},"_schema":{"frontpage":{"type":{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_cleanOptions":{"filter":true,"autoConvert":true,"removeEmptyStrings":true,"trimStrings":true,"getAutoValues":true,"removeNullsFromArrays":false,"extendAutoValueContext":{}},"_schema":{"method":{"type":{"definitions":[{}]},"optional":false,"label":"Method"},"count":{"type":{"definitions":[{"type":"SimpleSchema.Integer"}]},"optional":false,"label":"Count"},"scoreOffset":{"type":{"definitions":[{}]},"optional":false,"label":"Score offset"},"scoreExponent":{"type":{"definitions":[{}]},"optional":false,"label":"Score exponent"},"personalBlogpostModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Personal blogpost modifier"},"frontpageModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Frontpage modifier"},"curatedModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Curated modifier"},"onlyUnread":{"type":{"definitions":[{}]},"optional":false,"label":"Only unread"}},"_depsLabels":{},"_schemaKeys":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"_autoValues":[],"_blackboxKeys":[],"_firstLevelSchemaKeys":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]},"optional":false,"label":"Frontpage"},"recommendationspage":{"type":{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_cleanOptions":{"filter":true,"autoConvert":true,"removeEmptyStrings":true,"trimStrings":true,"getAutoValues":true,"removeNullsFromArrays":false,"extendAutoValueContext":{}},"_schema":{"method":{"type":{"definitions":[{}]},"optional":false,"label":"Method"},"count":{"type":{"definitions":[{"type":"SimpleSchema.Integer"}]},"optional":false,"label":"Count"},"scoreOffset":{"type":{"definitions":[{}]},"optional":false,"label":"Score offset"},"scoreExponent":{"type":{"definitions":[{}]},"optional":false,"label":"Score exponent"},"personalBlogpostModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Personal blogpost modifier"},"frontpageModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Frontpage modifier"},"curatedModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Curated modifier"},"onlyUnread":{"type":{"definitions":[{}]},"optional":false,"label":"Only unread"}},"_depsLabels":{},"_schemaKeys":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"_autoValues":[],"_blackboxKeys":[],"_firstLevelSchemaKeys":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]},"optional":false,"label":"Recommendationspage"},"afterpost":{"type":{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_cleanOptions":{"filter":true,"autoConvert":true,"removeEmptyStrings":true,"trimStrings":true,"getAutoValues":true,"removeNullsFromArrays":false,"extendAutoValueContext":{}},"_schema":{"method":{"type":{"definitions":[{}]},"optional":false,"label":"Method"},"count":{"type":{"definitions":[{"type":"SimpleSchema.Integer"}]},"optional":false,"label":"Count"},"scoreOffset":{"type":{"definitions":[{}]},"optional":false,"label":"Score offset"},"scoreExponent":{"type":{"definitions":[{}]},"optional":false,"label":"Score exponent"},"personalBlogpostModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Personal blogpost modifier"},"frontpageModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Frontpage modifier"},"curatedModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Curated modifier"},"onlyUnread":{"type":{"definitions":[{}]},"optional":false,"label":"Only unread"}},"_depsLabels":{},"_schemaKeys":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"_autoValues":[],"_blackboxKeys":[],"_firstLevelSchemaKeys":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]},"optional":false,"label":"Afterpost"}},"_depsLabels":{},"_schemaKeys":["frontpage","recommendationspage","afterpost"],"_autoValues":[],"_blackboxKeys":[],"_firstLevelSchemaKeys":["frontpage","recommendationspage","afterpost"],"_objectKeys":{"frontpage.":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"recommendationspage.":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"afterpost.":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"]},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2},"blackbox":true}]}*/ | null,
  readonly auto_subscribe_to_my_posts: boolean | null,
  readonly auto_subscribe_to_my_comments: boolean | null,
  readonly autoSubscribeAsOrganizer: boolean | null,
  readonly bookmarkedPostsMetadata: Array<any /*{"definitions":[{}]}*/ | null> | null,
  readonly noExpandUnreadCommentsReview: boolean | null,
  readonly reviewVotesQuadratic: boolean | null,
}

interface UserBookmarks { // fragment on Users
  readonly _id: string | null,
  readonly bookmarkedPostsMetadata: Array<any /*{"definitions":[{}]}*/ | null> | null,
  readonly bookmarkedPosts: Array<PostsList> | null,
}

interface UserKarmaChanges { // fragment on Users
  readonly _id: string | null,
  readonly karmaChanges: any,
}

interface RSSFeedMinimumInfo { // fragment on RSSFeeds
  readonly _id: string | null,
  readonly userId: string | null,
  readonly user: UsersMinimumInfo | null,
  readonly createdAt: Date | null,
  readonly ownedByUser: boolean | null,
  readonly displayFullContent: boolean | null,
  readonly nickname: string | null,
  readonly url: string | null,
}

interface CommentStats { // fragment on Comments
  readonly currentUserVotes: Array<VoteFragment> | null,
  readonly baseScore: number | null,
  readonly score: number | null,
}

interface DeletedCommentsMetaData { // fragment on Comments
  readonly _id: string | null,
  readonly deleted: boolean | null,
  readonly deletedDate: Date | null,
  readonly deletedByUser: DeletedCommentsMetaData_deletedByUser | null,
  readonly deletedReason: string | null,
  readonly deletedPublic: boolean | null,
}

interface DeletedCommentsMetaData_deletedByUser { // fragment on Users
  readonly _id: string | null,
  readonly displayName: string | null,
}

interface DeletedCommentsModerationLog extends DeletedCommentsMetaData { // fragment on Comments
  readonly user: UsersMinimumInfo | null,
  readonly post: DeletedCommentsModerationLog_post | null,
}

interface DeletedCommentsModerationLog_post { // fragment on Posts
  readonly title: string,
  readonly slug: string | null,
  readonly _id: string | null,
}

interface UsersBannedFromUsersModerationLog { // fragment on Users
  readonly _id: string | null,
  readonly slug: string | null,
  readonly displayName: string | null,
  readonly bannedUserIds: Array<string | null> | null,
}

interface CommentsListWithPostMetadata extends CommentsList { // fragment on Comments
  readonly post: PostsMinimumInfo | null,
}

interface UsersList extends UsersMinimumInfo { // fragment on Users
  readonly karma: number | null,
}

interface SunshineUsersList extends UsersMinimumInfo { // fragment on Users
  readonly karma: number | null,
  readonly bio: string | null,
  readonly htmlBio: string | null,
  readonly createdAt: Date | null,
  readonly email: string | null,
  readonly commentCount: number | null,
  readonly maxCommentCount: number | null,
  readonly postCount: number | null,
  readonly maxPostCount: number | null,
  readonly voteCount: number | null,
  readonly smallUpvoteCount: number | null,
  readonly bigUpvoteCount: number | null,
  readonly smallDownvoteCount: number | null,
  readonly bigDownvoteCount: number | null,
  readonly banned: Date | null,
  readonly reviewedByUserId: string | null,
  readonly reviewedAt: Date | null,
  readonly signUpReCaptchaRating: number | null,
  readonly needsReview: boolean | null,
  readonly sunshineSnoozed: boolean | null,
}

interface newRSSFeedFragment { // fragment on RSSFeeds
  readonly _id: string | null,
  readonly userId: string | null,
  readonly createdAt: Date | null,
  readonly ownedByUser: boolean | null,
  readonly displayFullContent: boolean | null,
  readonly nickname: string | null,
  readonly url: string | null,
  readonly status: string | null,
}

interface RSSFeedMutationFragment { // fragment on RSSFeeds
  readonly _id: string | null,
  readonly userId: string | null,
  readonly ownedByUser: boolean | null,
  readonly displayFullContent: boolean | null,
  readonly nickname: string | null,
  readonly url: string | null,
}

interface newEventFragment { // fragment on LWEvents
  readonly _id: string | null,
  readonly createdAt: Date | null,
  readonly userId: string | null,
  readonly name: string,
  readonly important: boolean | null,
  readonly properties: any /*{"definitions":[{"blackbox":true}]}*/ | null,
  readonly intercom: boolean | null,
}

interface lastEventFragment { // fragment on LWEvents
  readonly _id: string | null,
  readonly createdAt: Date | null,
  readonly documentId: string | null,
  readonly userId: string | null,
  readonly name: string,
  readonly important: boolean | null,
  readonly properties: any /*{"definitions":[{"blackbox":true}]}*/ | null,
  readonly intercom: boolean | null,
}

interface commentWithContextFragment { // fragment on Comments
  readonly _id: string | null,
  readonly parentCommentId: string | null,
  readonly topLevelCommentId: string | null,
  readonly contents: RevisionDisplay | null,
  readonly postedAt: Date | null,
  readonly userId: string | null,
  readonly user: UsersMinimumInfo | null,
  readonly currentUserVotes: Array<VoteFragment> | null,
  readonly baseScore: number | null,
  readonly score: number | null,
}

interface commentInlineFragment { // fragment on Comments
  readonly _id: string | null,
  readonly contents: RevisionDisplay | null,
  readonly userId: string | null,
  readonly user: UsersMinimumInfo | null,
}

interface UsersMinimumInfo { // fragment on Users
  readonly _id: string | null,
  readonly slug: string | null,
  readonly oldSlugs: Array<string | null> | null,
  readonly createdAt: Date | null,
  readonly username: string | null,
  readonly displayName: string | null,
  readonly fullName: string | null,
  readonly karma: number | null,
  readonly afKarma: number | null,
  readonly deleted: boolean | null,
  readonly groups: Array<string | null> | null,
  readonly isAdmin: boolean | null,
  readonly htmlBio: string | null,
  readonly postCount: number | null,
  readonly commentCount: number | null,
  readonly sequenceCount: number | null,
  readonly afPostCount: number | null,
  readonly afCommentCount: number | null,
  readonly beta: boolean | null,
  readonly spamRiskScore: number | null,
}

interface UsersProfile extends UsersMinimumInfo { // fragment on Users
  readonly createdAt: Date | null,
  readonly isAdmin: boolean | null,
  readonly bio: string | null,
  readonly htmlBio: string | null,
  readonly website: string | null,
  readonly groups: Array<string | null> | null,
  readonly postCount: number | null,
  readonly afPostCount: number | null,
  readonly frontpagePostCount: number | null,
  readonly commentCount: number | null,
  readonly sequenceCount: number | null,
  readonly afCommentCount: number | null,
  readonly sequenceCount: number | null,
  readonly afSequenceCount: number | null,
  readonly afSequenceDraftCount: number | null,
  readonly sequenceDraftCount: number | null,
  readonly moderationStyle: string | null,
  readonly moderationGuidelines: RevisionDisplay | null,
  readonly bannedUserIds: Array<string | null> | null,
  readonly location: string | null,
  readonly googleLocation: any /*{"definitions":[{"blackbox":true}]}*/ | null,
  readonly mapLocation: any /*{"definitions":[{"blackbox":true}]}*/ | null,
  readonly mapLocationSet: boolean | null,
  readonly mapMarkerText: string | null,
  readonly htmlMapMarkerText: string | null,
  readonly mongoLocation: any /*{"definitions":[{"blackbox":true}]}*/ | null,
  readonly shortformFeedId: string | null,
  readonly viewUnreviewedComments: boolean | null,
  readonly auto_subscribe_to_my_posts: boolean | null,
  readonly auto_subscribe_to_my_comments: boolean | null,
  readonly autoSubscribeAsOrganizer: boolean | null,
  readonly sunshineShowNewUserContent: boolean | null,
}

interface UsersMapEntry extends UsersMinimumInfo { // fragment on Users
  readonly createdAt: Date | null,
  readonly isAdmin: boolean | null,
  readonly groups: Array<string | null> | null,
  readonly location: string | null,
  readonly googleLocation: any /*{"definitions":[{"blackbox":true}]}*/ | null,
  readonly mapLocation: any /*{"definitions":[{"blackbox":true}]}*/ | null,
  readonly mapLocationSet: boolean | null,
  readonly mapMarkerText: string | null,
  readonly htmlMapMarkerText: string | null,
  readonly mongoLocation: any /*{"definitions":[{"blackbox":true}]}*/ | null,
}

interface UsersEdit extends UsersProfile { // fragment on Users
  readonly moderationGuidelines: RevisionEdit | null,
  readonly markDownPostEditor: boolean | null,
  readonly hideIntercom: boolean | null,
  readonly commentSorting: string | null,
  readonly currentFrontpageFilter: string | null,
  readonly frontpageFilterSettings: any /*{"definitions":[{"blackbox":true}]}*/ | null,
  readonly noCollapseCommentsPosts: boolean | null,
  readonly noCollapseCommentsFrontpage: boolean | null,
  readonly noSingleLineComments: boolean | null,
  readonly sunshineShowNewUserContent: boolean | null,
  readonly email: string | null,
  readonly whenConfirmationEmailSent: Date | null,
  readonly emailSubscribedToCurated: boolean | null,
  readonly unsubscribeFromAll: boolean | null,
  readonly moderatorAssistance: boolean | null,
  readonly collapseModerationGuidelines: boolean | null,
  readonly bannedUserIds: Array<string | null> | null,
  readonly bannedPersonalUserIds: Array<string | null> | null,
  readonly showHideKarmaOption: boolean | null,
  readonly voteBanned: boolean | null,
  readonly nullifyVotes: boolean | null,
  readonly deleteContent: boolean | null,
  readonly banned: Date | null,
  readonly username: string | null,
  readonly displayName: string | null,
  readonly fullName: string | null,
  readonly mongoLocation: any /*{"definitions":[{"blackbox":true}]}*/ | null,
  readonly googleLocation: any /*{"definitions":[{"blackbox":true}]}*/ | null,
  readonly location: string | null,
  readonly reviewedByUserId: string | null,
  readonly reviewForAlignmentForumUserId: string | null,
  readonly groups: Array<string | null> | null,
  readonly afApplicationText: string | null,
  readonly afSubmittedApplication: boolean | null,
  readonly karmaChangeLastOpened: Date | null,
  readonly karmaChangeNotifierSettings: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_cleanOptions":{"filter":true,"autoConvert":true,"removeEmptyStrings":true,"trimStrings":true,"getAutoValues":true,"removeNullsFromArrays":false,"extendAutoValueContext":{}},"_schema":{"updateFrequency":{"optional":true,"type":{"definitions":[{"allowedValues":["disabled","daily","weekly","realtime"]}]},"label":"Update frequency"},"timeOfDayGMT":{"optional":true,"type":{"definitions":[{"type":"SimpleSchema.Integer","min":0,"max":23}]},"label":"Time of day gmt"},"dayOfWeekGMT":{"optional":true,"type":{"definitions":[{"allowedValues":["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"]}]},"label":"Day of week gmt"},"showNegativeKarma":{"optional":true,"type":{"definitions":[{}]},"label":"Show negative karma"}},"_depsLabels":{},"_schemaKeys":["updateFrequency","timeOfDayGMT","dayOfWeekGMT","showNegativeKarma"],"_autoValues":[],"_blackboxKeys":[],"_firstLevelSchemaKeys":["updateFrequency","timeOfDayGMT","dayOfWeekGMT","showNegativeKarma"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/ | null,
  readonly recommendationSettings: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_cleanOptions":{"filter":true,"autoConvert":true,"removeEmptyStrings":true,"trimStrings":true,"getAutoValues":true,"removeNullsFromArrays":false,"extendAutoValueContext":{}},"_schema":{"frontpage":{"type":{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_cleanOptions":{"filter":true,"autoConvert":true,"removeEmptyStrings":true,"trimStrings":true,"getAutoValues":true,"removeNullsFromArrays":false,"extendAutoValueContext":{}},"_schema":{"method":{"type":{"definitions":[{}]},"optional":false,"label":"Method"},"count":{"type":{"definitions":[{"type":"SimpleSchema.Integer"}]},"optional":false,"label":"Count"},"scoreOffset":{"type":{"definitions":[{}]},"optional":false,"label":"Score offset"},"scoreExponent":{"type":{"definitions":[{}]},"optional":false,"label":"Score exponent"},"personalBlogpostModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Personal blogpost modifier"},"frontpageModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Frontpage modifier"},"curatedModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Curated modifier"},"onlyUnread":{"type":{"definitions":[{}]},"optional":false,"label":"Only unread"}},"_depsLabels":{},"_schemaKeys":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"_autoValues":[],"_blackboxKeys":[],"_firstLevelSchemaKeys":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]},"optional":false,"label":"Frontpage"},"recommendationspage":{"type":{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_cleanOptions":{"filter":true,"autoConvert":true,"removeEmptyStrings":true,"trimStrings":true,"getAutoValues":true,"removeNullsFromArrays":false,"extendAutoValueContext":{}},"_schema":{"method":{"type":{"definitions":[{}]},"optional":false,"label":"Method"},"count":{"type":{"definitions":[{"type":"SimpleSchema.Integer"}]},"optional":false,"label":"Count"},"scoreOffset":{"type":{"definitions":[{}]},"optional":false,"label":"Score offset"},"scoreExponent":{"type":{"definitions":[{}]},"optional":false,"label":"Score exponent"},"personalBlogpostModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Personal blogpost modifier"},"frontpageModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Frontpage modifier"},"curatedModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Curated modifier"},"onlyUnread":{"type":{"definitions":[{}]},"optional":false,"label":"Only unread"}},"_depsLabels":{},"_schemaKeys":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"_autoValues":[],"_blackboxKeys":[],"_firstLevelSchemaKeys":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]},"optional":false,"label":"Recommendationspage"},"afterpost":{"type":{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_cleanOptions":{"filter":true,"autoConvert":true,"removeEmptyStrings":true,"trimStrings":true,"getAutoValues":true,"removeNullsFromArrays":false,"extendAutoValueContext":{}},"_schema":{"method":{"type":{"definitions":[{}]},"optional":false,"label":"Method"},"count":{"type":{"definitions":[{"type":"SimpleSchema.Integer"}]},"optional":false,"label":"Count"},"scoreOffset":{"type":{"definitions":[{}]},"optional":false,"label":"Score offset"},"scoreExponent":{"type":{"definitions":[{}]},"optional":false,"label":"Score exponent"},"personalBlogpostModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Personal blogpost modifier"},"frontpageModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Frontpage modifier"},"curatedModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Curated modifier"},"onlyUnread":{"type":{"definitions":[{}]},"optional":false,"label":"Only unread"}},"_depsLabels":{},"_schemaKeys":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"_autoValues":[],"_blackboxKeys":[],"_firstLevelSchemaKeys":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]},"optional":false,"label":"Afterpost"}},"_depsLabels":{},"_schemaKeys":["frontpage","recommendationspage","afterpost"],"_autoValues":[],"_blackboxKeys":[],"_firstLevelSchemaKeys":["frontpage","recommendationspage","afterpost"],"_objectKeys":{"frontpage.":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"recommendationspage.":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"afterpost.":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"]},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2},"blackbox":true}]}*/ | null,
  readonly notificationShortformContent: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_cleanOptions":{"filter":true,"autoConvert":true,"removeEmptyStrings":true,"trimStrings":true,"getAutoValues":true,"removeNullsFromArrays":false,"extendAutoValueContext":{}},"_schema":{"channel":{"type":{"definitions":[{"allowedValues":["none","onsite","email","both"]}]},"optional":false,"label":"Channel"},"batchingFrequency":{"type":{"definitions":[{"allowedValues":["realtime","daily","weekly"]}]},"optional":false,"label":"Batching frequency"},"timeOfDayGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Time of day gmt"},"dayOfWeekGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Day of week gmt"}},"_depsLabels":{},"_schemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_autoValues":[],"_blackboxKeys":[],"_firstLevelSchemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/ | null,
  readonly notificationCommentsOnSubscribedPost: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_cleanOptions":{"filter":true,"autoConvert":true,"removeEmptyStrings":true,"trimStrings":true,"getAutoValues":true,"removeNullsFromArrays":false,"extendAutoValueContext":{}},"_schema":{"channel":{"type":{"definitions":[{"allowedValues":["none","onsite","email","both"]}]},"optional":false,"label":"Channel"},"batchingFrequency":{"type":{"definitions":[{"allowedValues":["realtime","daily","weekly"]}]},"optional":false,"label":"Batching frequency"},"timeOfDayGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Time of day gmt"},"dayOfWeekGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Day of week gmt"}},"_depsLabels":{},"_schemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_autoValues":[],"_blackboxKeys":[],"_firstLevelSchemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/ | null,
  readonly notificationRepliesToMyComments: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_cleanOptions":{"filter":true,"autoConvert":true,"removeEmptyStrings":true,"trimStrings":true,"getAutoValues":true,"removeNullsFromArrays":false,"extendAutoValueContext":{}},"_schema":{"channel":{"type":{"definitions":[{"allowedValues":["none","onsite","email","both"]}]},"optional":false,"label":"Channel"},"batchingFrequency":{"type":{"definitions":[{"allowedValues":["realtime","daily","weekly"]}]},"optional":false,"label":"Batching frequency"},"timeOfDayGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Time of day gmt"},"dayOfWeekGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Day of week gmt"}},"_depsLabels":{},"_schemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_autoValues":[],"_blackboxKeys":[],"_firstLevelSchemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/ | null,
  readonly notificationRepliesToSubscribedComments: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_cleanOptions":{"filter":true,"autoConvert":true,"removeEmptyStrings":true,"trimStrings":true,"getAutoValues":true,"removeNullsFromArrays":false,"extendAutoValueContext":{}},"_schema":{"channel":{"type":{"definitions":[{"allowedValues":["none","onsite","email","both"]}]},"optional":false,"label":"Channel"},"batchingFrequency":{"type":{"definitions":[{"allowedValues":["realtime","daily","weekly"]}]},"optional":false,"label":"Batching frequency"},"timeOfDayGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Time of day gmt"},"dayOfWeekGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Day of week gmt"}},"_depsLabels":{},"_schemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_autoValues":[],"_blackboxKeys":[],"_firstLevelSchemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/ | null,
  readonly notificationSubscribedUserPost: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_cleanOptions":{"filter":true,"autoConvert":true,"removeEmptyStrings":true,"trimStrings":true,"getAutoValues":true,"removeNullsFromArrays":false,"extendAutoValueContext":{}},"_schema":{"channel":{"type":{"definitions":[{"allowedValues":["none","onsite","email","both"]}]},"optional":false,"label":"Channel"},"batchingFrequency":{"type":{"definitions":[{"allowedValues":["realtime","daily","weekly"]}]},"optional":false,"label":"Batching frequency"},"timeOfDayGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Time of day gmt"},"dayOfWeekGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Day of week gmt"}},"_depsLabels":{},"_schemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_autoValues":[],"_blackboxKeys":[],"_firstLevelSchemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/ | null,
  readonly notificationPostsInGroups: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_cleanOptions":{"filter":true,"autoConvert":true,"removeEmptyStrings":true,"trimStrings":true,"getAutoValues":true,"removeNullsFromArrays":false,"extendAutoValueContext":{}},"_schema":{"channel":{"type":{"definitions":[{"allowedValues":["none","onsite","email","both"]}]},"optional":false,"label":"Channel"},"batchingFrequency":{"type":{"definitions":[{"allowedValues":["realtime","daily","weekly"]}]},"optional":false,"label":"Batching frequency"},"timeOfDayGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Time of day gmt"},"dayOfWeekGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Day of week gmt"}},"_depsLabels":{},"_schemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_autoValues":[],"_blackboxKeys":[],"_firstLevelSchemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/ | null,
  readonly notificationPrivateMessage: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_cleanOptions":{"filter":true,"autoConvert":true,"removeEmptyStrings":true,"trimStrings":true,"getAutoValues":true,"removeNullsFromArrays":false,"extendAutoValueContext":{}},"_schema":{"channel":{"type":{"definitions":[{"allowedValues":["none","onsite","email","both"]}]},"optional":false,"label":"Channel"},"batchingFrequency":{"type":{"definitions":[{"allowedValues":["realtime","daily","weekly"]}]},"optional":false,"label":"Batching frequency"},"timeOfDayGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Time of day gmt"},"dayOfWeekGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Day of week gmt"}},"_depsLabels":{},"_schemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_autoValues":[],"_blackboxKeys":[],"_firstLevelSchemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/ | null,
  readonly notificationSharedWithMe: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_cleanOptions":{"filter":true,"autoConvert":true,"removeEmptyStrings":true,"trimStrings":true,"getAutoValues":true,"removeNullsFromArrays":false,"extendAutoValueContext":{}},"_schema":{"channel":{"type":{"definitions":[{"allowedValues":["none","onsite","email","both"]}]},"optional":false,"label":"Channel"},"batchingFrequency":{"type":{"definitions":[{"allowedValues":["realtime","daily","weekly"]}]},"optional":false,"label":"Batching frequency"},"timeOfDayGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Time of day gmt"},"dayOfWeekGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Day of week gmt"}},"_depsLabels":{},"_schemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_autoValues":[],"_blackboxKeys":[],"_firstLevelSchemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/ | null,
  readonly hideFrontpageMap: boolean | null,
  readonly deleted: boolean | null,
}

interface unclaimedReportsList { // fragment on Reports
  readonly _id: string | null,
  readonly userId: string | null,
  readonly user: unclaimedReportsList_user | null,
  readonly commentId: string | null,
  readonly comment: unclaimedReportsList_comment | null,
  readonly postId: string,
  readonly post: unclaimedReportsList_post | null,
  readonly closedAt: Date | null,
  readonly createdAt: Date | null,
  readonly claimedUserId: string | null,
  readonly claimedUser: unclaimedReportsList_claimedUser | null,
  readonly link: string,
  readonly description: string | null,
  readonly reportedAsSpam: boolean | null,
  readonly markedAsSpam: boolean | null,
}

interface unclaimedReportsList_user { // fragment on Users
  readonly _id: string | null,
  readonly displayName: string | null,
  readonly username: string | null,
  readonly slug: string | null,
}

interface unclaimedReportsList_comment { // fragment on Comments
  readonly _id: string | null,
  readonly userId: string | null,
  readonly user: UsersMinimumInfo | null,
  readonly baseScore: number | null,
  readonly contents: RevisionDisplay | null,
  readonly postedAt: Date | null,
  readonly deleted: boolean | null,
  readonly postId: string | null,
  readonly post: unclaimedReportsList_comment_post | null,
}

interface unclaimedReportsList_comment_post { // fragment on Posts
  readonly _id: string | null,
  readonly slug: string | null,
  readonly title: string,
  readonly isEvent: boolean | null,
}

interface unclaimedReportsList_post { // fragment on Posts
  readonly _id: string | null,
  readonly slug: string | null,
  readonly title: string,
  readonly isEvent: boolean | null,
  readonly contents: RevisionDisplay | null,
}

interface unclaimedReportsList_claimedUser { // fragment on Users
  readonly _id: string | null,
  readonly displayName: string | null,
  readonly username: string | null,
  readonly slug: string | null,
}

interface WithVotePost { // fragment on Posts
  readonly __typename: string,
  readonly _id: string | null,
  readonly currentUserVotes: Array<WithVotePost_currentUserVotes> | null,
  readonly baseScore: number | null,
  readonly score: number | null,
  readonly afBaseScore: number | null,
  readonly voteCount: number | null,
}

interface WithVotePost_currentUserVotes { // fragment on Votes
  readonly _id: string | null,
  readonly voteType: string,
  readonly power: number | null,
}

interface WithVoteComment { // fragment on Comments
  readonly __typename: string,
  readonly _id: string | null,
  readonly currentUserVotes: Array<WithVoteComment_currentUserVotes> | null,
  readonly baseScore: number | null,
  readonly score: number | null,
  readonly afBaseScore: number | null,
  readonly voteCount: number | null,
}

interface WithVoteComment_currentUserVotes { // fragment on Votes
  readonly _id: string | null,
  readonly voteType: string,
  readonly power: number | null,
}

interface RevisionDisplay { // fragment on Revisions
  readonly version: string | null,
  readonly updateType: string | null,
  readonly editedAt: Date | null,
  readonly userId: string | null,
  readonly html: string | null,
  readonly wordCount: number,
  readonly htmlHighlight: string | null,
  readonly plaintextDescription: string | null,
}

interface RevisionEdit { // fragment on Revisions
  readonly version: string | null,
  readonly updateType: string | null,
  readonly editedAt: Date | null,
  readonly userId: string | null,
  readonly originalContents: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_cleanOptions":{"filter":true,"autoConvert":true,"removeEmptyStrings":true,"trimStrings":true,"getAutoValues":true,"removeNullsFromArrays":false,"extendAutoValueContext":{}},"_schema":{"type":{"type":{"definitions":[{}]},"optional":false,"label":"Type"},"data":{"type":{"definitions":[{},{"blackbox":true}]},"optional":false,"label":"Data"}},"_depsLabels":{},"_schemaKeys":["type","data"],"_autoValues":[],"_blackboxKeys":["data"],"_firstLevelSchemaKeys":["type","data"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/,
  readonly html: string | null,
  readonly markdown: string | null,
  readonly draftJS: any,
  readonly ckEditorMarkup: string | null,
  readonly wordCount: number,
  readonly htmlHighlight: string | null,
  readonly plaintextDescription: string | null,
}

interface ChaptersFragment { // fragment on Chapters
  readonly _id: string | null,
  readonly createdAt: Date | null,
  readonly title: string | null,
  readonly subtitle: string | null,
  readonly contents: RevisionDisplay | null,
  readonly number: number | null,
  readonly sequenceId: string | null,
  readonly postIds: Array<string | null>,
  readonly posts: Array<PostsList> | null,
}

interface ChaptersEdit extends ChaptersFragment { // fragment on Chapters
  readonly contents: RevisionEdit | null,
}

interface SequencesPageFragment { // fragment on Sequences
  readonly _id: string | null,
  readonly createdAt: Date | null,
  readonly userId: string | null,
  readonly user: UsersMinimumInfo | null,
  readonly title: string,
  readonly contents: RevisionDisplay | null,
  readonly gridImageId: string | null,
  readonly bannerImageId: string | null,
  readonly color: string | null,
  readonly canonicalCollectionSlug: string | null,
  readonly draft: boolean | null,
  readonly isDeleted: boolean | null,
  readonly hidden: boolean | null,
  readonly curatedOrder: number | null,
  readonly userProfileOrder: number | null,
  readonly af: boolean | null,
}

interface SequencesEdit extends SequencesPageFragment { // fragment on Sequences
  readonly contents: RevisionEdit | null,
}

interface SequencesNavigationFragment { // fragment on Sequences
  readonly _id: string | null,
  readonly createdAt: Date | null,
  readonly title: string,
  readonly color: string | null,
  readonly canonicalCollectionSlug: string | null,
  readonly draft: boolean | null,
  readonly isDeleted: boolean | null,
  readonly hidden: boolean | null,
  readonly curatedOrder: number | null,
  readonly chapters: Array<SequencesNavigationFragment_chapters> | null,
}

interface SequencesNavigationFragment_chapters { // fragment on Chapters
  readonly _id: string | null,
  readonly title: string | null,
  readonly number: number | null,
  readonly sequenceId: string | null,
  readonly posts: Array<SequencesNavigationFragment_chapters_posts> | null,
}

interface SequencesNavigationFragment_chapters_posts { // fragment on Posts
  readonly _id: string | null,
  readonly slug: string | null,
  readonly title: string,
  readonly lastVisitedAt: Date | null,
  readonly isRead: boolean | null,
  readonly excerpt: string | null,
  readonly baseScore: number | null,
  readonly score: number | null,
  readonly commentCount: number | null,
  readonly viewCount: number | null,
  readonly clickCount: number | null,
}

interface BookPageFragment { // fragment on Books
  readonly _id: string | null,
  readonly createdAt: Date | null,
  readonly title: string | null,
  readonly number: number | null,
  readonly subtitle: string | null,
  readonly contents: RevisionDisplay | null,
  readonly sequenceIds: Array<string | null> | null,
  readonly sequences: Array<SequencesPageFragment> | null,
  readonly postIds: Array<string | null> | null,
  readonly posts: Array<PostsList> | null,
  readonly collectionId: string,
}

interface BookEdit extends BookPageFragment { // fragment on Books
  readonly contents: RevisionEdit | null,
}

interface CollectionsPageFragment { // fragment on Collections
  readonly _id: string | null,
  readonly createdAt: Date | null,
  readonly slug: string,
  readonly userId: string | null,
  readonly user: UsersMinimumInfo | null,
  readonly title: string,
  readonly contents: RevisionDisplay | null,
  readonly firstPageLink: string | null,
  readonly gridImageId: string | null,
  readonly books: Array<BookPageFragment> | null,
}

interface CollectionsEditFragment extends CollectionsPageFragment { // fragment on Collections
  readonly contents: RevisionEdit | null,
}

interface SuggestAlignmentPost extends PostsList { // fragment on Posts
  readonly suggestForAlignmentUsers: Array<SuggestAlignmentPost_suggestForAlignmentUsers> | null,
}

interface SuggestAlignmentPost_suggestForAlignmentUsers { // fragment on Users
  readonly _id: string | null,
  readonly displayName: string | null,
}

interface SuggestAlignmentUser extends UsersMinimumInfo { // fragment on Users
  readonly afKarma: number | null,
  readonly afPostCount: number | null,
  readonly afCommentCount: number | null,
  readonly reviewForAlignmentForumUserId: string | null,
  readonly groups: Array<string | null> | null,
  readonly afApplicationText: string | null,
  readonly afSubmittedApplication: boolean | null,
}

interface TagRelBasicInfo { // fragment on TagRels
  readonly _id: string | null,
  readonly score: number | null,
  readonly baseScore: number | null,
  readonly afBaseScore: number | null,
  readonly voteCount: number | null,
  readonly userId: string,
  readonly tagId: string,
  readonly postId: string,
}

interface TagRelFragment extends TagRelBasicInfo { // fragment on TagRels
  readonly tag: TagPreviewFragment | null,
  readonly post: PostsList | null,
  readonly currentUserVotes: Array<VoteFragment> | null,
}

interface TagRelMinimumFragment extends TagRelBasicInfo { // fragment on TagRels
  readonly tag: TagPreviewFragment | null,
  readonly currentUserVotes: Array<VoteFragment> | null,
}

interface WithVoteTagRel { // fragment on TagRels
  readonly __typename: string,
  readonly _id: string | null,
  readonly score: number | null,
  readonly baseScore: number | null,
  readonly afBaseScore: number | null,
  readonly voteCount: number | null,
  readonly userId: string,
  readonly tagId: string,
  readonly postId: string,
  readonly post: WithVoteTagRel_post | null,
  readonly tag: WithVoteTagRel_tag | null,
  readonly currentUserVotes: Array<WithVoteTagRel_currentUserVotes> | null,
}

interface WithVoteTagRel_post { // fragment on Posts
  readonly _id: string | null,
  readonly slug: string | null,
  readonly title: string,
}

interface WithVoteTagRel_tag { // fragment on Tags
  readonly _id: string | null,
  readonly name: string,
  readonly slug: string | null,
  readonly core: boolean,
  readonly postCount: number | null,
  readonly deleted: boolean | null,
  readonly adminOnly: boolean,
  readonly description: WithVoteTagRel_tag_description | null,
}

interface WithVoteTagRel_tag_description { // fragment on Revisions
  readonly htmlHighlight: string | null,
}

interface WithVoteTagRel_currentUserVotes { // fragment on Votes
  readonly _id: string | null,
  readonly voteType: string,
  readonly power: number | null,
}

interface TagBasicInfo { // fragment on Tags
  readonly _id: string | null,
  readonly name: string,
  readonly slug: string | null,
  readonly core: boolean,
  readonly postCount: number | null,
  readonly deleted: boolean | null,
  readonly adminOnly: boolean,
  readonly defaultOrder: number,
  readonly suggestedAsFilter: boolean,
}

interface TagFragment extends TagBasicInfo { // fragment on Tags
  readonly description: TagFragment_description | null,
}

interface TagFragment_description { // fragment on Revisions
  readonly html: string | null,
  readonly htmlHighlight: string | null,
}

interface TagPreviewFragment extends TagBasicInfo { // fragment on Tags
  readonly description: TagPreviewFragment_description | null,
}

interface TagPreviewFragment_description { // fragment on Revisions
  readonly htmlHighlight: string | null,
}

interface TagEditFragment extends TagBasicInfo { // fragment on Tags
  readonly description: RevisionEdit | null,
}

interface SubscriptionsDefaultFragment { // fragment on Subscriptions
  readonly createdAt: Date | null,
  readonly userId: string | null,
  readonly state: string,
  readonly documentId: string,
  readonly collectionName: string,
  readonly deleted: boolean | null,
  readonly type: string,
}

interface SubscriptionState { // fragment on Subscriptions
  readonly _id: string | null,
  readonly userId: string | null,
  readonly createdAt: Date | null,
  readonly state: string,
  readonly documentId: string,
  readonly collectionName: string,
  readonly deleted: boolean | null,
  readonly type: string,
}

interface RevisionsDefaultFragment { // fragment on Revisions
  readonly editedAt: Date | null,
  readonly updateType: string | null,
  readonly version: string | null,
  readonly userId: string | null,
  readonly originalContents: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_cleanOptions":{"filter":true,"autoConvert":true,"removeEmptyStrings":true,"trimStrings":true,"getAutoValues":true,"removeNullsFromArrays":false,"extendAutoValueContext":{}},"_schema":{"type":{"type":{"definitions":[{}]},"optional":false,"label":"Type"},"data":{"type":{"definitions":[{},{"blackbox":true}]},"optional":false,"label":"Data"}},"_depsLabels":{},"_schemaKeys":["type","data"],"_autoValues":[],"_blackboxKeys":["data"],"_firstLevelSchemaKeys":["type","data"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/,
  readonly html: string | null,
  readonly markdown: string | null,
  readonly draftJS: any,
  readonly ckEditorMarkup: string | null,
  readonly wordCount: number,
  readonly htmlHighlight: string | null,
  readonly plaintextDescription: string | null,
  readonly plaintextMainText: string | null,
}

interface VoteMinimumInfo { // fragment on Votes
  readonly _id: string | null,
  readonly voteType: string,
}

interface VoteFragment { // fragment on Votes
  readonly _id: string | null,
  readonly voteType: string,
  readonly power: number | null,
}

interface TagRelVotes { // fragment on Votes
  readonly _id: string | null,
  readonly userId: string,
  readonly voteType: string,
  readonly power: number | null,
  readonly documentId: string,
  readonly votedAt: Date | null,
  readonly isUnvote: boolean,
  readonly tagRel: WithVoteTagRel | null,
}

interface TagVotingActivity extends TagRelVotes { // fragment on Votes
  readonly tagRel: TagRelFragment | null,
}

interface VotedItem { // fragment on Votes
  readonly documentId: string,
  readonly power: number | null,
  readonly votedAt: Date | null,
}

interface NewRelatedPostRel { // fragment on PostRelations
  readonly _id: string | null,
  readonly type: string | null,
  readonly sourcePostId: string,
  readonly targetPostId: string,
}

interface ChildRelatedPostRelList { // fragment on PostRelations
  readonly _id: string | null,
  readonly type: string | null,
  readonly sourcePost: PostsBase | null,
  readonly targetPost: PostsBase | null,
}

interface SuggestAlignmentComment extends CommentsList { // fragment on Comments
  readonly post: SuggestAlignmentComment_post | null,
  readonly suggestForAlignmentUserIds: Array<string | null> | null,
  readonly suggestForAlignmentUsers: Array<SuggestAlignmentComment_suggestForAlignmentUsers> | null,
}

interface SuggestAlignmentComment_post { // fragment on Posts
  readonly title: string,
  readonly _id: string | null,
  readonly slug: string | null,
}

interface SuggestAlignmentComment_suggestForAlignmentUsers { // fragment on Users
  readonly _id: string | null,
  readonly displayName: string | null,
}

interface FragmentTypes {
  UsersDefaultFragment: UsersDefaultFragment
  VotesDefaultFragment: VotesDefaultFragment
  PostsMinimumInfo: PostsMinimumInfo
  PostsBase: PostsBase
  PostsAuthors: PostsAuthors
  PostsList: PostsList
  PostsListTag: PostsListTag
  PostsDetails: PostsDetails
  PostsRevision: PostsRevision
  PostsRevisionEdit: PostsRevisionEdit
  PostsWithNavigationAndRevision: PostsWithNavigationAndRevision
  PostsWithNavigation: PostsWithNavigation
  PostSequenceNavigation: PostSequenceNavigation
  PostsPage: PostsPage
  PostsEdit: PostsEdit
  EditModerationGuidelines: EditModerationGuidelines
  PostsRevisionsList: PostsRevisionsList
  PostsRecentDiscussion: PostsRecentDiscussion
  UsersBannedFromPostsModerationLog: UsersBannedFromPostsModerationLog
  SunshinePostsList: SunshinePostsList
  CommentsList: CommentsList
  CommentPermalink: CommentPermalink
  ShortformComments: ShortformComments
  CommentWithRepliesFragment: CommentWithRepliesFragment
  CommentEdit: CommentEdit
  NotificationsDefaultFragment: NotificationsDefaultFragment
  ConversationsDefaultFragment: ConversationsDefaultFragment
  MessagesDefaultFragment: MessagesDefaultFragment
  RSSFeedsDefaultFragment: RSSFeedsDefaultFragment
  ReportsDefaultFragment: ReportsDefaultFragment
  LWEventsDefaultFragment: LWEventsDefaultFragment
  lwEventsAdminPageFragment: lwEventsAdminPageFragment
  emailHistoryFragment: emailHistoryFragment
  BansDefaultFragment: BansDefaultFragment
  BansAdminPageFragment: BansAdminPageFragment
  SequencesDefaultFragment: SequencesDefaultFragment
  PostRelationsDefaultFragment: PostRelationsDefaultFragment
  TagRelsDefaultFragment: TagRelsDefaultFragment
  CommentsDefaultFragment: CommentsDefaultFragment
  TagsDefaultFragment: TagsDefaultFragment
  PostsDefaultFragment: PostsDefaultFragment
  ChaptersDefaultFragment: ChaptersDefaultFragment
  BooksDefaultFragment: BooksDefaultFragment
  CollectionsDefaultFragment: CollectionsDefaultFragment
  ReviewVotesDefaultFragment: ReviewVotesDefaultFragment
  reviewVoteFragment: reviewVoteFragment
  LocalgroupsDefaultFragment: LocalgroupsDefaultFragment
  localGroupsBase: localGroupsBase
  localGroupsHomeFragment: localGroupsHomeFragment
  localGroupsEdit: localGroupsEdit
  UsersAdmin: UsersAdmin
  conversationsListFragment: conversationsListFragment
  newConversationFragment: newConversationFragment
  messageListFragment: messageListFragment
  editTitle: editTitle
  NotificationsList: NotificationsList
  UsersCurrent: UsersCurrent
  UserBookmarks: UserBookmarks
  UserKarmaChanges: UserKarmaChanges
  RSSFeedMinimumInfo: RSSFeedMinimumInfo
  CommentStats: CommentStats
  DeletedCommentsMetaData: DeletedCommentsMetaData
  DeletedCommentsModerationLog: DeletedCommentsModerationLog
  UsersBannedFromUsersModerationLog: UsersBannedFromUsersModerationLog
  CommentsListWithPostMetadata: CommentsListWithPostMetadata
  UsersList: UsersList
  SunshineUsersList: SunshineUsersList
  newRSSFeedFragment: newRSSFeedFragment
  RSSFeedMutationFragment: RSSFeedMutationFragment
  newEventFragment: newEventFragment
  lastEventFragment: lastEventFragment
  commentWithContextFragment: commentWithContextFragment
  commentInlineFragment: commentInlineFragment
  UsersMinimumInfo: UsersMinimumInfo
  UsersProfile: UsersProfile
  UsersMapEntry: UsersMapEntry
  UsersEdit: UsersEdit
  unclaimedReportsList: unclaimedReportsList
  WithVotePost: WithVotePost
  WithVoteComment: WithVoteComment
  RevisionDisplay: RevisionDisplay
  RevisionEdit: RevisionEdit
  ChaptersFragment: ChaptersFragment
  ChaptersEdit: ChaptersEdit
  SequencesPageFragment: SequencesPageFragment
  SequencesEdit: SequencesEdit
  SequencesNavigationFragment: SequencesNavigationFragment
  BookPageFragment: BookPageFragment
  BookEdit: BookEdit
  CollectionsPageFragment: CollectionsPageFragment
  CollectionsEditFragment: CollectionsEditFragment
  SuggestAlignmentPost: SuggestAlignmentPost
  SuggestAlignmentUser: SuggestAlignmentUser
  TagRelBasicInfo: TagRelBasicInfo
  TagRelFragment: TagRelFragment
  TagRelMinimumFragment: TagRelMinimumFragment
  WithVoteTagRel: WithVoteTagRel
  TagBasicInfo: TagBasicInfo
  TagFragment: TagFragment
  TagPreviewFragment: TagPreviewFragment
  TagEditFragment: TagEditFragment
  SubscriptionsDefaultFragment: SubscriptionsDefaultFragment
  SubscriptionState: SubscriptionState
  RevisionsDefaultFragment: RevisionsDefaultFragment
  VoteMinimumInfo: VoteMinimumInfo
  VoteFragment: VoteFragment
  TagRelVotes: TagRelVotes
  TagVotingActivity: TagVotingActivity
  VotedItem: VotedItem
  NewRelatedPostRel: NewRelatedPostRel
  ChildRelatedPostRelList: ChildRelatedPostRelList
  SuggestAlignmentComment: SuggestAlignmentComment
}

type CollectionNameString = "Users"|"Votes"|"Notifications"|"Conversations"|"Messages"|"RSSFeeds"|"Reports"|"LWEvents"|"DatabaseMetadata"|"Migrations"|"DebouncerEvents"|"ReadStatuses"|"Bans"|"Sequences"|"PostRelations"|"TagRels"|"Comments"|"Tags"|"Posts"|"Chapters"|"Books"|"Collections"|"ReviewVotes"|"Localgroups"|"Subscriptions"|"Revisions"|"LegacyData"|"EmailTokens"

